<?php
//$Id$

/**
 * @file test file for cck_select_other
 *   Testing file
 */


/**
 * SimpleTest class for cck_select_other
 *
 */
class CCKSelectOtherTest extends DrupalWebTestCase {

  public $contentType = NULL;
  public $test_node = NULL;
  public $test_instance = NULL;
  public $test_field = NULL;
  public $options = NULL;

  /**
   * Implementation of getInfo() method
   * @return array 
   */
  public static function getInfo() {
    return array(
      'name' => t('CCK Select Other'),
      'description' => t('Confirms that there are 5 options available. Used as a base class.'),
      'group' => t('Field UI'),
    );
  }

  /**
   * Implementation of setUp() method
   */
  public function setUp() {
    parent::setUp(array('cck_select_other'));
//    parent::setUp('field', 'field_ui', 'list', 'options', 'cck_select_other'); //enable field api modules

    $this->assertTrue(module_exists('cck_select_other'), t('CCK Select Other module is enabled.'));

    $content_type = strtolower($this->randomName(5));

    /* Setup an admin user */
    $this->admin_user = $this->drupalCreateUser( array('administer content types', 'administer site configuration'));
    $this->drupalLogin($this->admin_user);

    /* Create a new content type */
    $settings = array(
      'type' => $content_type,
    );
    $this->contentType = $this->drupalCreateContentType($settings);

    /* Create some options for our select other list */
    $this->options = '';
    for ($i = 0; $i < 4; $i++) {
      $this->options .= $this->randomName(5);
      if ($i < 3) {
        $this->options .= "\n";
      }
    } 
    
    /* Create a new field on our content type */
    $field_label = $this->randomName(5);
    $field_name = strtolower($this->randomName(5));
    $bundle_path = 'admin/structure/types/manage/' . $this->contentType->type;
    $edit = array(
      'fields[_add_new_field][label]' => $field_label,
      'fields[_add_new_field][field_name]' => $field_name,
      'fields[_add_new_field][type]' => 'list_text',
      'fields[_add_new_field][widget_type]' => 'cck_select_other',
    );
    $this->drupalPost($bundle_path . '/fields', $edit, 'Save');
    $edit = array(
      'instance[widget][settings][select_list_options]' => $this->options,
    );
    $this->drupalPost($bundle_path . '/fields/field_' . $field_name, $edit, 'Save settings');

    $this->test_field = field_info_field('field_' . $field_name);
    $this->test_instance = field_info_instance('node', 'field_' . $field_name, $this->contentType->type);

    /* Setup a web user that can create content */
    // @todo bypass node access seems to be the only thing that does not return 403
    $this->web_user = $this->drupalCreateUser(array('access content', 'create ' . $this->contentType->type . ' content', 'delete any ' . $this->contentType->type . ' content', 'bypass node access'));

    $this->drupalLogout();

    $this->drupalLogin($this->web_user);

    $settings = array(
      'type' => $this->contentType->type,
    );
    $this->test_node = $this->drupalCreateNode($settings);

    $this->drupalLogout();
  }

  /**
   * Implementation of tearDown() method
   */
  public function tearDown() {
    $this->drupalLogin($this->web_user);
    $this->drupalPost('node/' . $this->test_node->nid . '/delete', array('confirm' => 1), 'Delete');
    $this->drupalLogout();

    $this->drupalLogin($this->admin_user);
    field_delete_field($this->test_field['field_name']);
    $this->drupalLogout();

    $this->test_node = NULL;
    $this->test_field = NULL;
    $this->test_instance = NULL;
    $this->admin_user = NULL;
    $this->web_user = NULL;
    $this->options = NULL;

    parent::tearDown();
  }

  /**
   * Basic test
   */
  function testSelectOtherOptions() {
    $options_arr = cck_select_other_options($this->test_instance);
    $this->assertEqual(5, count($options_arr), t('There are 5 = %count options set on the field.', array('%count' => count($options_arr))));
  }
}

/**
 * @class
 * CCK Select Other Basic Test Case
 */
class CCKSelectOtherBasicTest extends CCKSelectOtherTest {

  static public function getInfo() {
    return array(
      'name' => t('CCK Select Other Basic Test'),
      'description' => t('Test saving values with the CCK Select Other widget.'),
      'group' => t('Field UI'),
    );
  }

  /**
   * Modify node with a new value from select list options
   */
  function testSelectFieldValue() {
    $options_arr = cck_select_other_options($this->test_instance);
    $this->assertEqual(5, count($options_arr), t('There are 5 = %count options set on the field.', array('%count' => count($options_arr))));

    $my_option = array_rand(cck_select_other_options($this->test_instance));

    $this->drupalLogin($this->web_user);

    // @todo sometimes 'und' is undefined...
    $select_field = $this->test_field['field_name'] . '[und][0][select_other_list]';
    $text_field = $this->test_field['field_name'] . '[und][0][select_other_text_input]';
    $edit = array(
      $select_field => $my_option,
    );
    if ($my_option == 'other') {
      $edit[$text_field] = $this->randomName(16);
    }

    $this->drupalGet('node/' . $this->test_node->nid);
    $this->drupalPost('node/' . $this->test_node->nid . '/edit', $edit, t('Save'));
    $this->test_node = node_load($this->test_node->nid, NULL, TRUE);
    $this->assertRaw($this->test_node->{$this->test_field['field_name']}['und'][0]['value'], $my_option, t('Select other field data %field matches %match', array('%field' => $this->test_node->{$this->test_field['field_name']}['und'][0]['value'], '%match' => $my_option)));

    $this->drupalLogout();
  }

  /**
   * Fail validation of node edit form, check option values
   * TODO: I don't think I can resave the same form with drupalPost
   */
  function testFailValidationForm() {
    $my_option = array_rand(cck_select_other_options($this->test_instance));

    $this->drupalLogin($this->web_user);

    $select_field = $this->test_field['field_name'] . '[und][0][select_other_list]';
    $text_field = $this->test_field['field_name'] . '[und][0][select_other_text_input]';
    $edit = array(
      'title' => '',
      $select_field => $my_option,
    );
    if ($my_option == 'other') {
      $edit[$text_field] = $this->randomName(16);
    }

    $field_str = str_replace('_', '-', $this->test_field['field_name']);
    $this->drupalPost('node/' . $this->test_node->nid . '/edit', $edit, t('Save'));
    $this->assertFieldById('edit-' . $field_str . '-und-0-select-other-list', $my_option, t('Select field value matches'));

    $this->drupalLogout();
  }
}

/**
 * @class
 *
 */
class CCKSelectOtherAllowedValuesTest extends CCKSelectOtherTest {

  static public function getInfo() {
    return array(
      'name' => t('CCK Select Other Allowed Values Test'),
      'description' => t('Confirm that allowed values set on a field restrict the widget.'),
      'group' => t('Field UI'),
    );
  }

  /**
   * Fail validation or test allowed values for other option
   */
  function testAllowedValues() {
    $this->drupalLogin($this->admin_user);

    //Setup some allowed values to equal our select list options + another known value
    $this->test_field['settings']['allowed_values'] = $this->test_instance['widget']['settings']['select_list_options'] . "\nAllowedValue";
    field_update_field($this->test_field);

    $this->test_field = field_info_field($this->test_field['field_name']);
    $this->assertEqual($this->test_field['id'], $this->test_instance['field_id'], t('Field name @first is equal to @second. Field updated successfully.', array('@first' => $this->test_field['id'], '@second' => $this->test_instance['field_id'])));

    $this->drupalLogout();
    $this->drupalLogin($this->web_user);

    $select_field = $this->test_field['field_name'] . '[und][0][select_other_list]';
    $text_field = $this->test_field['field_name'] . '[und][0][select_other_text_input]';
    $goodEdit = array(
      $select_field => 'other',
      $text_field => 'AllowedValue',
    );

    $badEdit = array(
      $select_field => 'other',
      $text_field => 'DisallowedValue',
    );

    // try to save a disallowed value
    $this->drupalPost('node/' . $this->test_node->nid . '/edit', $badEdit, t('Save'));
    $this->assertRaw(t('list_illegal_value'), t('Successfully blocked submission of DisallowedValue.'));

    // try to save an allowed value
    $this->drupalPost('node/' . $this->test_node->nid . '/edit', $goodEdit, t('Save'));
    $this->assertNoRaw(t('list_illegal_value'), t('Successfully saved form with allowed value, AllowedValue.'));

    $this->drupalLogout();
  }

}

