<?php
//$Id$

/**
 * @file test file for cck_select_other
 *   Testing file
 */


/**
 * SimpleTest class for cck_select_other
 *
 */
class CCKSelectOtherTest extends DrupalWebTestCase {

  /**
   * Implementation of getInfo() method
   * @return array 
   */
  public static function getInfo() {
    return array(
      'name' => t('CCK Select Other'),
      'description' => t('Executes test suite for CCK Select Other module.'),
      'group' => t('Field UI'),
    );
  }

  /**
   * Implementation of setUp() method
   */
  public function setUp() {
    parent::setUp('field_ui', 'list', 'cck_select_other'); //enable field api modules

    $content_type = strtolower($this->randomName(5));

    /* Setup an admin user */
    $this->admin_user = $this->drupalCreateUser( array('administer content types'));
    $this->drupalLogin($this->admin_user);

    /* Create a new content type */
    $settings = array(
      'type' => $content_type,
    );
    $this->contentType = $this->drupalCreateContentType($settings);

    /* Setup field */
    $this->field = array(
      'field_name' => 'field_' . strtolower($this->randomName(5)),
      'type' => 'list_text',
      'active' => 1,
      'settings' => array(
        'allowed_values' => '',
      ),
    );
    $this->field = field_create_field($this->field);
    $this->assertNotNull($this->field['id'], t('Successfully created field, %name, programmatically.', array('%name' => $this->field['field_name'])));

    /* Setup field instance on content type */
    $this->instance = array(
      'field_name' => $this->field['field_name'],
      'entity_type' => 'node',
      'label' => 'Select Other List',
      'bundle' => $this->contentType->type,
      'required' => false,
      'widget' => array(
        'type' => 'cck_select_other',
        'settings' => array(
          'select_list_options' => '',
          'select_list_options_php' => '',
          'default_value_php' => NULL,
        ),
      ),
      'display' => array(
        'default' => array('type' => 'visible'),
        'teaser' => array('type' => 'visible'),
      ),
    );

    /* Additional field setup */
    for ($i = 0; $i < 4; $i++) {
      $this->instance['widget']['settings']['select_list_options'] .= $this->randomName(5) . "\n";
    }
    rtrim($this->instance['widget']['settings']['select_list_options'], "\n");

    /* Create field instance */
    $this->instance = field_create_instance($this->instance);

    $this->assertNotNull($this->instance['field_id'], t('Successfully created field instance, %name, programmatically.', array('%name' => $this->instance['field_name'])));

    /* Setup a web user that can create content */
    // @todo bypass node access seems to be the only thing that does not return 403
    $this->web_user = $this->drupalCreateUser(array('access content', 'create ' . $this->contentType->type . ' content', 'bypass node access'));

    $this->drupalLogout();
  }

  /**
   * Implementation of tearDown() method
   */
  public function tearDown() {
    parent::tearDown();
  }

  /**
   * Modify node with a new value from select list options
   */
  function testSelectFieldValue() {
    $this->drupalLogin($this->web_user);

    $settings = array(
      'type' => $this->contentType->type,
    );
    $this->node = $this->drupalCreateNode($settings);

    $options = cck_select_other_options($this->instance);

    $rand = rand(0, 4);
    $i = 0;
    foreach ($options as $key => $option) {
      if ($i == $rand) {
        $my_option = $key;
      }
      $i++;
    }

    $this->drupalGet('node/' . $this->node->nid . '/edit');

    // @todo sometimes 'und' is undefined...
    $select_field = $this->field['field_name'] . '[und][0][select_other_list]';
    $text_field = $this->field['field_name'] . '[und][0][select_other_text_input]';
    $edit = array(
      $select_field => $my_option,
    );
    if ($my_option == 'other') {
      $edit[$text_field] = $this->randomName(16);
    }

    $this->drupalPost('node/' . $this->node->nid . '/edit', $edit, t('Save'));
    $this->node = node_load($this->node->nid, NULL, TRUE);
    $this->assertRaw($this->node->{$this->field['field_name']}['und'][0]['value'], $my_option, t('Select other field data %field matches %match', array('%field' => $this->node->{$this->field['field_name']}['und'][0]['value'], '%match' => $my_option)));

    $this->drupalLogout();
  }

  /**
   * Fail validation of node edit form, check option values
   * TODO: I don't think I can resave the same form with drupalPost
   */
  function testFailValidationForm() {
    $this->drupalLogin($this->web_user);

    $settings = array(
      'type' => $this->contentType->type,
    );
    $this->node = $this->drupalCreateNode($settings);

    $options = cck_select_other_options($this->instance);
    $rand = rand(0, 4);
    $i = 0;
    foreach ($options as $key => $option) {
      if ($i == $rand) {
        $my_option = $key;
      }
      $i++;
    }

    $select_field = $this->field['field_name'] . '[und][0][select_other_list]';
    $text_field = $this->field['field_name'] . '[und][0][select_other_text_input]';
    $edit = array(
      'title' => '',
      $select_field => $my_option,
    );
    if ($my_option == 'other') {
      $edit[$text_field] = $this->randomName(16);
    }

    $field_str = str_replace('_', '-', $this->field['field_name']);
    $this->drupalPost('node/' . $this->node->nid . '/edit', $edit, t('Save'));
    $this->assertFieldById('edit-' . $field_str . '-und-0-select-other-list', $my_option, t('Select field value matches'));

    $this->drupalLogout();
  }

  /**
   * Fail validation or test allowed values for other option
   */
  function testAllowedValues() {
    $this->drupalLogin($this->admin_user);

    //Setup some allowed values to equal our select list options + another known value
    $this->field['settings']['allowed_values'] = $this->instance['widget']['settings']['select_list_options'] . "\nAllowedValue";
    field_update_field($this->field);

    $this->field = field_info_field($this->field['field_name']);
    $this->assertEqual($this->field['id'], $this->instance['field_id'], t('Field name @first is equal to @second. Field updated successfully.', array('@first' => $this->field['id'], '@second' => $this->instance['field_id'])));

    $this->drupalLogout();
    $this->drupalLogin($this->web_user);

    $settings = array(
      'type' => $this->contentType->type,
    );
    $this->node = $this->drupalCreateNode($settings);

    $select_field = $this->field['field_name'] . '[und][0][select_other_list]';
    $text_field = $this->field['field_name'] . '[und][0][select_other_text_input]';
    $goodEdit = array(
      $select_field => 'other',
      $text_field => 'AllowedValue',
    );

    $badEdit = array(
      $select_field => 'other',
      $text_field => 'DisallowedValue',
    );

    // try to save a disallowed value
    $this->drupalPost('node/' . $this->node->nid . '/edit', $badEdit, t('Save'));
    $this->assertRaw(t('list_illegal_value'), t('Successfully blocked submission of DisallowedValue.'));

    // try to save an allowed value
    $this->drupalPost('node/' . $this->node->nid . '/edit', $goodEdit, t('Save'));
    $this->assertNoRaw(t('list_illegal_value'), t('Successfully saved form with allowed value, AllowedValue.'));

    $this->drupalLogout();
  }

}

